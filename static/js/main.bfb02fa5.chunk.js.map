{"version":3,"sources":["components/ListSearch.js","components/Table.js","components/Button.js","components/Popup.js","components/TabPanel.js","App.js","reportWebVitals.js","index.js"],"names":["ListSearch","props","state","currentSearchQuery","handleChange","bind","clearSelection","updateParent","e","target","value","length","trim","this","setState","handler","className","onChange","placeholder","column","name","onClick","Component","Table","searchHandler","searchQuery","convertToProperLink","link","substr","getValueFromSelector","item","selector","sel","split","output","forEach","key","sorting","order","columns","sort","data","disableSearch","sendDataAsPropWithLink","rowLink","undefined","filteredList","filter","dataItem","toLowerCase","indexOf","map","index","changeSorting","actions","val","id","to","pathname","action","actionKey","properLink","buttonClass","icon","text","trigger","process","defaultProps","Button","type","cssClass","getClassName","disabled","Popup","headline","content","cancelAction","color","useEffect","document","body","style","overflow","show","buttonType","TabPanel","tabs","selection","width","App","calculate","fcfs","sjf","priority","roundRobin","showCalculatedData","changeSelection","event","parseInt","handleNameChange","showAddProcessPopup","processData","popupContent","newprocess","newarrival","newburst","newpriority","editIndex","addProcessPopup","hideProcessPopup","processDetails","console","log","concat","arrival","burst","fcfswt","fcfstat","sjfwt","sjftat","pwt","ptat","rrwt","rrtat","service_time","totfcfswt","avgfcfswt","totfcfstat","avgfcfstat","i","totsjfwt","avgsjfwt","totsjftat","avgsjftat","rt","finish_time","complete","time","minm","shortest","check","j","totpwt","totptat","avgpwt","avgptat","n","a","b","service","quantum","totrrwt","totrrtat","avgrrtat","avgrrwt","rem_bt","done","showDeletePopup","findIndex","obj","deleteIndex","deleteProcess","splice","labels","datasets","label","backgroundColor","pointBackgroundColor","parseFloat","toFixed","options","legend","position","title","display","fontColor","fontSize","padding","scale","reverse","gridLines","angleLines","ticks","backdropColor","beginAtZero","pointLabels","pointLabelFontSize","height","src","background","speed","loop","autoplay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bfb02fa5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nclass ListSearch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentSearchQuery: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.clearSelection = this.clearSelection.bind(this);\r\n        this.updateParent = this.updateParent.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n\r\n        //Do not change value when the field is only spaces.\r\n        if (e.target.value.length === 0 || e.target.value.trim().length !== 0) {\r\n            this.setState({ currentSearchQuery: e.target.value }, this.updateParent);\r\n        }\r\n    }\r\n\r\n    updateParent() {\r\n        this.props.handler(this.state.currentSearchQuery);\r\n    }\r\n    clearSelection() {\r\n        this.setState({ currentSearchQuery: '' }, this.updateParent);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { currentSearchQuery } = this.state;\r\n        return (\r\n            <div className=\"listSearch\">\r\n                <div className=\"listSearchBar\">\r\n                    <div>\r\n                        <SearchIcon />\r\n                    </div>\r\n\r\n                    <input onChange={this.handleChange} value={this.state.currentSearchQuery} placeholder={\"Search by \" + this.props.column} name=\"currentSearchQuery\" className=\"listSearchInput\" />\r\n                </div>\r\n                {currentSearchQuery !== '' ? <button className=\"listSearchClose\" onClick={this.clearSelection}><CloseIcon /></button>\r\n                    : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListSearch;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ListSearch from './ListSearch';\r\nimport PropTypes from 'prop-types'\r\n\r\n// DeptTable.js\r\n/** \r\nGenerates a Table\r\n\r\nProps: \r\n@param {Array} columns REQUIRED - Array of objects with name and selector\r\n@param {Array} data REQUIRED - Array of objects with data fields\r\n@param {Array} [actions] Each action has an icon (FA), trigger (function) or link (String) - to be appended by ID), text and buttonClass.\r\n@param {String} [link] URL to be appended by ID (Used for View)\r\n@param {Function} [sort] Callback - takes in selector (String) and order (String: (\"asc\", \"desc\"))\r\n@param {Boolean} [disableSearch] - if true, search is disabled\r\n@param {Boolean} [sendDataAsPropWithLink] - if true, the data is sent as a prop to the view Link\r\n@augments {Component<Props, State>}\r\n*/\r\n\r\nclass Table extends Component {\r\n\r\n    static propTypes = {\r\n        /** Array of objects with column name and data selector */\r\n        columns: PropTypes.arrayOf(PropTypes.shape({\r\n            /** Name of the column\r\n             */\r\n            name: PropTypes.string.isRequired,\r\n            selector: PropTypes.string.isRequired\r\n        })).isRequired,\r\n        /** Array of objects with data to be displayed*/\r\n        data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        /** Action - Array of objects with styling and link/trigger */\r\n        actions: PropTypes.arrayOf(PropTypes.shape({\r\n            icon: PropTypes.string.isRequired,\r\n            trigger: PropTypes.func,\r\n            link: PropTypes.string,\r\n            buttonClass: PropTypes.string,\r\n            text: PropTypes.string\r\n        })),\r\n        /** Callback function for sorting (Params - selector and order) */\r\n        sort: PropTypes.func,\r\n        /** Link to view element (will be appended by ID) */\r\n        link: PropTypes.string,\r\n        /** Whether search is disabled or not */\r\n        disableSearch: PropTypes.bool\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchQuery: '',\r\n            sorting: {\r\n                selector: \"\",\r\n                order: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    searchHandler = (searchQuery) => {\r\n        this.setState({ searchQuery: searchQuery });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            sorting: {\r\n                selector: this.props.columns[0].selector,\r\n                order: 0\r\n            }\r\n        })\r\n    }\r\n\r\n    //Change sorting\r\n    changeSorting(selector) {\r\n        if (this.state.sorting.selector === selector) {\r\n            this.setState({\r\n                sorting: {\r\n                    selector: selector,\r\n                    order: !this.state.sorting.order\r\n                }\r\n            }, () => {\r\n                this.props.sort(this.state.sorting.selector, this.state.sorting.order ? \"desc\" : \"asc\")\r\n            }\r\n            )\r\n        } else {\r\n            this.setState({\r\n                sorting: {\r\n                    selector: selector,\r\n                    order: 0\r\n                }\r\n            }, () => {\r\n                this.props.sort(this.state.sorting.selector, this.state.sorting.order ? \"desc\" : \"asc\")\r\n            })\r\n        }\r\n    }\r\n\r\n    convertToProperLink = (link) => {\r\n        if (link.substr(-1) === '/') {\r\n            return link\r\n        } else {\r\n            return link + \"/\"\r\n        }\r\n    }\r\n\r\n    getValueFromSelector = (item, selector) => {\r\n        let sel = selector.split(\".\");\r\n        // console.log(sel)\r\n        let output = \"\"\r\n        sel.forEach((value, key) => {\r\n            if (key === 0) {\r\n                output = item[value]\r\n            } else {\r\n                output = output ? output[value] : \"\"\r\n            }\r\n        })\r\n        return output\r\n    }\r\n\r\n\r\n    // Table component logic and UI come here\r\n    render() {\r\n\r\n        const { searchQuery, sorting } = this.state;\r\n        const { data, columns, link, sort, disableSearch, sendDataAsPropWithLink } = this.props;\r\n\r\n        var rowLink = \"\"\r\n        if (link !== undefined) {\r\n            rowLink = this.convertToProperLink(link);\r\n        }\r\n        const filteredList = data.filter(\r\n            (dataItem) => {\r\n                return this.getValueFromSelector(dataItem, columns[0].selector).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1;\r\n            }\r\n        )\r\n\r\n        if (data.length === 0) {\r\n\r\n            return (<div className=\"empty-table\">\r\n                <i className=\"far fa-question-circle\"></i>\r\n                <h3>Nothing to show here. Add process to continue.</h3></div>)\r\n        }\r\n        return (\r\n\r\n            <div className=\"tableContainer\">\r\n                {disableSearch ? null :\r\n                    <ListSearch handler={this.searchHandler} column={columns[0].name.toLowerCase()} />\r\n                }\r\n                {filteredList.length === 0 ?\r\n                    <div className=\"table-no-results\">\r\n                        <i className=\"fas fa-exclamation-circle\"></i>\r\n                        <p>Sorry, we couldn't find anything related to <span className=\"bold\">\"{searchQuery}\"</span>.</p>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n\r\n\r\n                        <table className=\"table\">\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    {\r\n                                        columns.map((item, index) => {\r\n                                            return (\r\n                                                <th key={index}>\r\n                                                    {sort === undefined ? item.name :\r\n                                                        <button onClick={() => { this.changeSorting(item.selector) }}>\r\n                                                            <span>{item.name}</span>\r\n                                                            {item.selector === sorting.selector ?\r\n                                                                <i className={!sorting.order ? \"fas fa-caret-up\" : \"fas fa-caret-down\"}></i>\r\n                                                                : null\r\n                                                            }\r\n                                                        </button>\r\n                                                    }\r\n                                                </th>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        this.props.actions !== undefined ?\r\n                                            <th>Actions</th> : null\r\n                                    }\r\n                                </tr>\r\n\r\n                            </thead>\r\n                            <tbody>\r\n\r\n\r\n                                {\r\n                                    filteredList.map((item, key) =>\r\n                                        <tr key={key}>\r\n                                            {\r\n\r\n                                                columns.map((column, index) => {\r\n\r\n                                                    let val = this.getValueFromSelector(item, column.selector)\r\n                                                    return (\r\n                                                        <td key={index}>\r\n                                                            {link !== undefined && item.id !== undefined ?\r\n\r\n\r\n                                                                sendDataAsPropWithLink ? <Link to={{\r\n                                                                    pathname: rowLink + item.id,\r\n                                                                    state: {\r\n                                                                        data: item\r\n                                                                    }\r\n                                                                }} className=\"row-link\">{typeof val === \"boolean\" ?\r\n                                                                    val ? \"Yes\" : \"No\"\r\n                                                                    :\r\n                                                                    val}</Link>\r\n\r\n                                                                    :\r\n                                                                    <Link to={rowLink + item.id} className=\"row-link\">{typeof val === \"boolean\" ?\r\n                                                                        val ? \"Yes\" : \"No\"\r\n                                                                        :\r\n                                                                        val}</Link>\r\n                                                                :\r\n                                                                typeof val === \"boolean\" ?\r\n                                                                    val ? \"Yes\" : \"No\"\r\n                                                                    :\r\n                                                                    val\r\n                                                            }\r\n                                                        </td>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                            {\r\n                                                this.props.actions !== undefined ?\r\n                                                    <td className=\"action-td\">\r\n                                                        {this.props.actions.map((action, actionKey) => {\r\n\r\n                                                            if (action.link !== undefined) {\r\n                                                                var properLink = this.convertToProperLink(action.link);\r\n                                                                return <Link to={properLink + item.id} className={action.buttonClass} key={actionKey}><i className={action.icon}></i> {action.text}</Link>\r\n\r\n                                                            }\r\n                                                            return <button onClick={() => { action.trigger(item.process) }} className={action.buttonClass} key={actionKey}><i className={action.icon}></i>  {action.text}</button>\r\n                                                        }\r\n\r\n                                                        )}\r\n                                                    </td>\r\n                                                    : null}\r\n                                        </tr>)\r\n                                }\r\n\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Table;\r\n\r\nTable.defaultProps = {\r\n    disableSearch: false\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n/**\r\n * Renders a button with a onClick Handler\r\n * \r\n * Props -\r\n * @param {String} [text] - The text to be displayed\r\n * @param {String|JSX} [icon] - The icon to be displayed\r\n * @param {Function} onClick - the handler [Required]\r\n * @param {String} link - link if button is used as a link\r\n * @param {String} [type=primary] - options: \"primary\", \"secondary\", \"warning\", \"success\", \"disabled\", \"grey\"\r\n * @augments {Component<Props, State>}\r\n */\r\nclass Button extends Component {\r\n\r\n    static propTypes = {\r\n        /** The type of button.\r\n         * \r\n         * Can be \"primary\", \"secondary\", \"warning\", \"success\", \"disabled\"\r\n         */\r\n        type: PropTypes.oneOf([\"primary\", \"secondary\", \"warning\", \"success\", \"disabled\", \"grey\"]),\r\n        /** The text to be shown in the button. */\r\n        text: PropTypes.string,\r\n        /** The icon to be shown in the button. */\r\n        icon: PropTypes.string,\r\n        /** The onClick handler of the button. */\r\n        onClick: PropTypes.func,\r\n        /** Link - if button is used as a Link */\r\n        link: PropTypes.string\r\n    }\r\n\r\n    render() {\r\n        const { text, type, onClick, icon, link } = this.props\r\n\r\n        //Get the CSS class name\r\n        let cssClass = this.getClassName(type, icon, text);\r\n\r\n        if (link !== \"\") {\r\n            return (\r\n                <Link to={link} className=\"btn-link\">\r\n                    <button className={cssClass} disabled={type === \"disabled\"}>\r\n                        {icon !== \"\" ?\r\n                            <span className=\"icon-in-button\">\r\n                                {(typeof icon) === \"string\" ? <i className={icon}></i> : icon}\r\n                            </span> : null}\r\n                        <span className=\"text-in-button\">{text}</span>\r\n                    </button>\r\n                </Link>\r\n            );\r\n        }\r\n        return (\r\n            <button className={cssClass} onClick={onClick} disabled={type === \"disabled\"}>\r\n                {icon !== \"\" ?\r\n                    <span className=\"icon-in-button\">\r\n                        {(typeof icon) === \"string\" ? <i className={icon}></i> : icon}\r\n                    </span> : null}\r\n                <span className=\"text-in-button\">{text}</span>\r\n            </button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} type \r\n     * @param {String} icon \r\n     * @param {String} text \r\n     * @returns {String} Returns the CSS Class name of the button\r\n     */\r\n    getClassName(type, icon, text) {\r\n        let cssClass = 'btn'\r\n        switch (type) {\r\n            case 'primary':\r\n                cssClass = cssClass + ' btn-primary';\r\n                break;\r\n            case 'secondary':\r\n                cssClass = cssClass + ' btn-secondary';\r\n                break;\r\n            case 'warning':\r\n                cssClass = cssClass + ' btn-warning';\r\n                break;\r\n            case 'success':\r\n                cssClass = cssClass + ' btn-success';\r\n                break;\r\n            case 'disabled':\r\n                cssClass = cssClass + ' btn-disabled';\r\n                break;\r\n            case 'grey':\r\n                cssClass = cssClass + ' btn-grey';\r\n                break;\r\n            default:\r\n                cssClass = cssClass + ' btn-primary';\r\n        }\r\n        //If icon is present\r\n        if (icon !== \"\") {\r\n            //If text is present\r\n            if (text !== \"\") {\r\n                cssClass = cssClass + ' btn-icon';\r\n            }\r\n            else {\r\n                //If text is not present (only icon)\r\n                cssClass = cssClass + ' btn-only-icon';\r\n            }\r\n\r\n        }\r\n        return cssClass;\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    text: \"\",\r\n    type: \"primary\",\r\n    icon: \"\",\r\n    link: \"\"\r\n}\r\n\r\nexport default Button;","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Button from './Button';\r\n/** \r\nGenerates a Table\r\n\r\nProps: \r\n@param {String} headline REQUIRED - Headline text\r\n@param {JSX} content REQUIRED - Content to be shown in the popup (can be loaders etc)\r\n@param {Array} [actions] Each action is an object defining the Button parameters - icon (optional), onClick (function), text and buttonType.\r\n@param {Object} cancelAction Two properties - \"show\" - whether to show the close icon, and \"onClick\" - the parent function which hides the popup\r\n@param {String} color Can be \"red\", \"darkBlue\", \"pink\", \"grey\" and \"white\" \r\n*/\r\nconst Popup = props => {\r\n\r\n    const { headline, content, actions, cancelAction, color } = props\r\n\r\n    useEffect(() => {\r\n        document.body.style.overflow = 'hidden';\r\n        return () => {\r\n            document.body.style.overflow = 'unset';\r\n        }\r\n    })\r\n    return (\r\n        <div className=\"popup\">\r\n            <div className=\"popup-inner\">\r\n                <div className={\"popup-header popup-header-\" + color}>\r\n                    <h3>{headline}</h3>\r\n                    {cancelAction.show ?\r\n                        <button className=\"popup-cancel-button\" onClick={cancelAction.onClick}><CloseIcon /></button>\r\n                        : null}\r\n                </div>\r\n                <div className=\"popup-content\">\r\n                    {content}\r\n                </div>\r\n                {actions.length > 0 ?\r\n                    <div className=\"popup-actions\">\r\n                        {actions.map((action) => <Button text={action.text} icon={action.icon} onClick={action.onClick} type={action.buttonType} />)}\r\n                    </div>\r\n                    : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPopup.propTypes = {\r\n    /** Headline text */\r\n    headline: PropTypes.string.isRequired,\r\n    /** Content to be shown in the popup (can be loaders etc) - JSX */\r\n    content: PropTypes.element.isRequired,\r\n    /** Each action is an object defining the Button parameters - icon (optional), onClick (function), text and buttonType. */\r\n    actions: PropTypes.array,\r\n    /** Two properties - \"show\" - whether to show the close icon, and \"onClick\" - the parent function which hides the popup */\r\n    cancelAction: PropTypes.object.isRequired,\r\n    /** Can be \"red\", \"darkBlue\", \"blue\", \"grey\" and \"white\" */\r\n    color: PropTypes.oneOf([\"red\", \"darkBlue\", \"pink\", \"grey\", \"white\"])\r\n}\r\n\r\nexport default Popup\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass TabPanel extends Component {\r\n\r\n    render() {\r\n\r\n        const { tabs, selection } = this.props\r\n        const style = {\r\n            width: \"calc(\" + 100 / tabs.length + \"% - 2px)\"\r\n        }\r\n\r\n        return (\r\n            <div className=\"tabContainer\">\r\n\r\n                {tabs.map((value, index) => {\r\n                    return (\r\n                        <button key={index} name={value} onClick={() => { this.props.handler(index) }} className={selection === index ? \"active\" : \"\"} style={style}>{value}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default (TabPanel);","import React, { Component } from 'react';\nimport './App.css';\nimport Table from '../src/components/Table';\nimport Button from '../src/components/Button';\nimport Popup from '../src/components/Popup';\nimport TabPanel from '../src/components/TabPanel';\nimport { Radar } from 'react-chartjs-2';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newprocess: \"\",\n      newarrival: 0,\n      newburst: 0,\n      newpriority: 0,\n      processData: [\n        // {\n        //   process: \"p1\",\n        //   arrival: 0,\n        //   burst: 10,\n        //   priority: 2,\n        //   fcfswt: 0,\n        //   fcfstat: 0,\n        //   sjfwt: 0,\n        //   sjftat: 0,\n        //   pwt: 0,\n        //   ptat: 0,\n        //   rrwt: 0,\n        //   rrtat: 0,\n        //   service_time: 0\n        // },\n        // {\n        //   process: \"p2\",\n        //   arrival: 1,\n        //   burst: 5,\n        //   priority: 0,\n        //   fcfswt: 0,\n        //   fcfstat: 0,\n        //   sjfwt: 0,\n        //   sjftat: 0,\n        //   pwt: 0,\n        //   ptat: 0,\n        //   rrwt: 0,\n        //   rrtat: 0,\n        //   service_time: 0\n        // },\n        // {\n        //   process: \"p3\",\n        //   arrival: 3,\n        //   burst: 8,\n        //   priority: 1,\n        //   fcfswt: 0,\n        //   fcfstat: 0,\n        //   sjfwt: 0,\n        //   sjftat: 0,\n        //   pwt: 0,\n        //   ptat: 0,\n        //   rrwt: 0,\n        //   rrtat: 0,\n        //   service_time: 0\n        // },\n        // {\n        //   process: \"p4\",\n        //   arrival: 2,\n        //   burst: 2,\n        //   priority: 7,\n        //   fcfswt: 0,\n        //   fcfstat: 0,\n        //   sjfwt: 0,\n        //   sjftat: 0,\n        //   pwt: 0,\n        //   ptat: 0,\n        //   rrwt: 0,\n        //   rrtat: 0,\n        //   service_time: 0\n        // },\n        // {\n        //   process: \"p5\",\n        //   arrival: 4,\n        //   burst: 4,\n        //   priority: 8,\n        //   fcfswt: 0,\n        //   fcfstat: 0,\n        //   sjfwt: 0,\n        //   sjftat: 0,\n        //   pwt: 0,\n        //   ptat: 0,\n        //   rrwt: 0,\n        //   rrtat: 0,\n        //   service_time: 0\n        // }\n      ],\n      quantum: 0,\n      selection: 0,\n      totfcfswt: 0,\n      totfcfstat: 0,\n      totsjfwt: 0,\n      totsjftat: 0,\n      totpwt: 0,\n      totptat: 0,\n      totrrwt: 0,\n      totrrtat: 0,\n      avgfcfswt: 0,\n      avgfcfstat: 0,\n      avgsjfwt: 0,\n      avgsjftat: 0,\n      avgpwt: 0,\n      avgptat: 0,\n      avgrrwt: 0,\n      avgrrtat: 0,\n      showCalculatedData: false,\n      deleteIndex: \"\",\n      addProcessPopup: {\n        show: false,\n        headline: \"\",\n        content: <div></div>,\n        actions: [\n          {\n            text: \"Cancel\",\n            buttonType: \"red\",\n            onClick: this.hideProcessPopup\n          }\n        ],\n        cancelAction: {\n          show: true,\n          onClick: this.hideProcessPopup\n        },\n        color: \"pink\"\n      }\n    }\n  }\n\n  calculate = () => {\n    this.fcfs()\n    this.sjf()\n    this.priority()\n    this.roundRobin()\n    this.setState({\n      showCalculatedData: true\n    })\n  }\n\n  changeSelection = (index) => {\n    this.setState({\n      selection: index\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: parseInt(event.target.value)\n    })\n  }\n  handleNameChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  showAddProcessPopup = (process, type) => {\n    const { processData } = this.state\n    let index, newprocess, newarrival, newburst, newpriority\n\n    let popupContent = <div>\n      <p>Add Process Details</p>\n      <div className=\"popup-input-div\">\n        <label>Process name: </label>\n        <input className=\"form-input\" type=\"text\" name=\"newprocess\" value={newprocess} onChange={this.handleNameChange} />\n      </div>\n      <div className=\"popup-input-div\">\n        <label>Arrival Time: </label>\n        <input className=\"form-input\" type=\"number\" name=\"newarrival\" value={newarrival} onChange={this.handleChange} />\n      </div>\n      <div className=\"popup-input-div\">\n        <label>Burst Time: </label>\n        <input className=\"form-input\" type=\"number\" name=\"newburst\" value={newburst} onChange={this.handleChange} />\n      </div>\n      <div className=\"popup-input-div\">\n        <label>Priority: </label>\n        <input className=\"form-input\" type=\"number\" name=\"newpriority\" value={newpriority} onChange={this.handleChange} />\n      </div>\n    </div>\n\n    this.setState({\n      editIndex: index,\n      addProcessPopup: {\n        show: true,\n        headline: \"Add Process\",\n        content: popupContent,\n        actions: [\n          {\n            text: \"Cancel\",\n            buttonType: \"warning\",\n            onClick: this.hideProcessPopup\n          },\n          {\n            text: \"Add\",\n            buttonType: \"primary\",\n            onClick: this.processDetails\n          }\n        ],\n        cancelAction: {\n          show: true,\n          onClick: this.hideProcessPopup\n        },\n        color: \"pink\"\n      }\n    })\n  }\n\n  hideProcessPopup = () => {\n    this.setState({\n      addProcessPopup: {\n        show: false,\n        headline: \"\",\n        content: <div></div>,\n        actions: [\n          {\n            text: \"Cancel\",\n            buttonType: \"warning\",\n            onClick: this.hideProcessPopup\n          },\n          {\n            text: \"Add\",\n            buttonType: \"primary\",\n            onClick: this.processDetails\n          }\n        ],\n        cancelAction: {\n          show: true,\n          onClick: this.hideProcessPopup\n        },\n        color: \"pink\"\n      }\n    })\n  }\n\n  processDetails = (type) => {\n    const { newprocess, newarrival, newburst, newpriority } = this.state\n    console.log(\"data\", newprocess, newarrival, newburst, newpriority)\n    this.setState({\n      processData: this.state.processData.concat({\n        process: newprocess, arrival: newarrival, burst: newburst, priority: newpriority, fcfswt: 0,\n        fcfstat: 0,\n        sjfwt: 0,\n        sjftat: 0,\n        pwt: 0,\n        ptat: 0,\n        rrwt: 0,\n        rrtat: 0,\n        service_time: 0\n      }),\n      addProcessPopup: {\n        show: false\n      }\n    })\n  }\n\n  fcfs = () => {\n    const { processData } = this.state\n    let { totfcfswt, avgfcfswt, totfcfstat, avgfcfstat } = this.state\n\n    for (let i = 0; i < processData.length; i++) {\n      if (i === 0) {\n        processData[i].service_time = 0\n        processData[i].fcfswt = 0\n        processData[i].fcfstat = processData[i].burst\n      } else {\n        processData[i].service_time = processData[i - 1].service_time + processData[i - 1].burst\n        processData[i].fcfswt = processData[i].service_time - processData[i].arrival\n        processData[i].fcfstat = processData[i].fcfswt + processData[i].burst\n      }\n      totfcfswt = totfcfswt + processData[i].fcfswt\n      totfcfstat = totfcfstat + processData[i].fcfstat\n      console.log(\"fcfs\", processData[i].fcfswt, processData[i].fcfstat)\n    }\n    avgfcfswt = totfcfswt / processData.length\n    avgfcfstat = totfcfstat / processData.length\n\n    this.setState({\n      processData,\n      totfcfswt: totfcfswt,\n      avgfcfswt: avgfcfswt,\n      totfcfstat: totfcfstat,\n      avgfcfstat: avgfcfstat\n    })\n  }\n\n  sjf = () => {\n    const { processData } = this.state\n    let { totsjfwt, avgsjfwt, totsjftat, avgsjftat } = this.state\n\n    let rt = []\n    for (let i = 0; i < processData.length; i++)\n      rt[i] = processData[i].burst;\n\n    let complete = 0, time = 0, minm = 9999, shortest = 0, finish_time;\n    let check = false;\n\n    // Process until all processes gets completed \n    while (complete !== processData.length) {\n\n      // Find process with minimum remaining time among the processes that arrives till the current time` \n      for (let j = 0; j < processData.length; j++) {\n        if ((processData[j].arrival <= time) &&\n          (rt[j] < minm) && rt[j] > 0) {\n          minm = rt[j];\n          shortest = j;\n          check = true;\n        }\n      }\n      if (check === false) {\n        time++;\n        continue;\n      }\n      // Reduce remaining time by one \n      rt[shortest]--;\n      // Update minimum \n      minm = rt[shortest];\n      if (minm === 0)\n        minm = 9999;\n\n      // If a process gets completely executed \n      if (rt[shortest] === 0) {\n        // Increment complete \n        complete++;\n        check = false;\n        // Find finish time of current process \n        finish_time = time + 1;\n\n        // Calculate waiting time \n        processData[shortest].sjfwt = finish_time - processData[shortest].burst - processData[shortest].arrival;\n\n        if (processData[shortest].sjfwt < 0)\n          processData[shortest].sjfwt = 0;\n      }\n      time++;\n    }\n    for (let i = 0; i < processData.length; i++) {\n      processData[i].sjftat = processData[i].burst + processData[i].sjfwt;\n      totsjfwt = totsjfwt + processData[i].sjfwt\n      totsjftat = totsjftat + processData[i].sjftat\n    }\n    avgsjfwt = totsjfwt / processData.length\n    avgsjftat = totsjftat / processData.length\n\n    this.setState({\n      processData,\n      totsjfwt: totsjfwt,\n      totsjftat: totsjftat,\n      avgsjfwt: avgsjfwt,\n      avgsjftat: avgsjftat\n    })\n  }\n\n\n  priority = () => {\n    // const { processData } = this.state\n    let { totpwt, totptat, avgpwt, avgptat, processData } = this.state\n    let n = processData.length\n    processData.sort((a, b) => {\n      if (a.arrival === b.arrival) {\n        return a.priority > b.priority;\n      }\n      else {\n        return a.arrival < b.arrival;\n      }\n    })\n    console.log(\"process\", processData)\n    // let process_order = []\n    // for (let i = 0; i < n; i++) {\n    //   if (processData[i].arrival === processData[i + 1].arrival) {\n    //     if (processData[i].priority < processData[i + 1].priority)\n    //       process_order.push(processData[i])\n    //   }\n    //   else if (processData[i].arrival < processData[i + 1].arrival) {\n    //     process_order.push(processData[i])\n    //   }\n    // }\n    // console.log(\"process order\", process_order)\n\n    let service = [];\n\n    // Initilising initial elements of the arrays \n    service[0] = processData[0].arrival;\n    processData[0].pwt = 0;\n\n\n    for (let i = 1; i < processData.length; i++) {\n      service[i] = processData[i - 1].burst + service[i - 1];\n\n      processData[i].pwt = processData[i - 1].burst + processData[i - 1].pwt;\n\n      // If waiting time is negative, change it into zero \n\n      if (processData[i].pwt < 0) {\n        processData[i].pwt = 0;\n      }\n\n    }\n    for (let i = 0; i < n; i++) {\n      processData[i].ptat = processData[i].burst + processData[i].pwt;\n      totpwt = totpwt + processData[i].pwt\n      totptat = totptat + processData[i].ptat\n    }\n    avgpwt = totpwt / processData.length\n    avgptat = totptat / processData.length\n\n    this.setState({\n      processData,\n      totpwt: totpwt,\n      totptat: totptat,\n      avgpwt: avgpwt,\n      avgptat: avgptat\n    })\n\n  }\n\n  roundRobin = () => {\n    const { processData, quantum } = this.state\n    let { totrrwt, totrrtat, avgrrtat, avgrrwt } = this.state\n\n    // Make a copy of burst times bt[] to store remaining burst times. \n    let rem_bt = [];\n    for (let i = 0; i < processData.length; i++)\n      rem_bt[i] = processData[i].burst;\n\n    let time = 0\n\n    // Keep traversing processes in round robin manner until all of them are not done. \n    while (1) {\n      let done = true;\n\n      // Traverse all processes one by one repeatedly \n      for (let i = 0; i < processData.length; i++) {\n        // If burst time of a process is greater than 0 then only need to process further \n        if (rem_bt[i] > 0) {\n          done = false;\n          if (rem_bt[i] > quantum) {\n            // Increase the value of time i.e. shows how much time a process has been processed \n            time += quantum;\n            // Decrease the burst_time of current process by quantum \n            rem_bt[i] -= quantum;\n          }\n\n          // If burst time is smaller than or equal to quantum.\n          else {\n            // Increase the value of t i.e. shows how much time a process has been processed \n            time = time + rem_bt[i];\n            // Waiting time is current time minus time used by this process \n            processData[i].rrwt = time - processData[i].burst;\n            // As the process gets fully executed make its remaining burst time = 0 \n            rem_bt[i] = 0;\n          }\n        }\n      }\n\n      // If all processes are done \n      if (done === true)\n        break;\n    }\n\n    //Calculate turn around time\n    for (let i = 0; i < processData.length; i++) {\n      processData[i].rrtat = processData[i].burst + processData[i].rrwt;\n      totrrwt = totrrwt + processData[i].rrwt\n      totrrtat = totrrtat + processData[i].rrtat\n    }\n    avgrrwt = totrrwt / processData.length\n    avgrrtat = totrrtat / processData.length\n\n    //set state\n    this.setState({\n      processData,\n      totrrwt: totrrwt,\n      totrrtat: totrrtat,\n      avgrrwt: avgrrwt,\n      avgrrtat: avgrrtat\n    })\n  }\n\n  showDeletePopup = (process) => {\n    const { processData } = this.state\n    const index = processData.findIndex(obj => obj.process === process)\n    let popupContent = <div>\n      <span>Are you sure you want to delete <b>{process}</b>?</span>\n    </div>\n\n    this.setState({\n      deleteIndex: index,\n      addProcessPopup: {\n        show: true,\n        headline: \"Delete Process\",\n        content: popupContent,\n        actions: [\n          {\n            text: \"Cancel\",\n            buttonType: \"warning\",\n            onClick: this.hideProcessPopup\n          },\n          {\n            text: \"Delete\",\n            buttonType: \"primary\",\n            onClick: this.deleteProcess\n          }\n        ],\n        cancelAction: {\n          show: true,\n          onClick: this.hideProcessPopup\n        },\n        color: \"red\"\n      }\n    })\n  }\n\n  deleteProcess = () => {\n    const { deleteIndex, processData } = this.state\n    processData.splice(deleteIndex, 1)\n    this.setState({\n      addProcessPopup: {\n        show: false\n      }\n    })\n  }\n\n  render() {\n    const { processData, selection, addProcessPopup, quantum, avgfcfstat, avgfcfswt, avgptat, avgpwt, avgrrtat, avgrrwt, avgsjftat, avgsjfwt, showCalculatedData } = this.state;\n\n    const columns = [\n      {\n        name: \"Process\",\n        selector: \"process\"\n      },\n      {\n        name: \"Arrival Time\",\n        selector: \"arrival\"\n      },\n      {\n        name: \"Burst Time\",\n        selector: \"burst\"\n      },\n      {\n        name: \"Priority\",\n        selector: \"priority\"\n      }\n    ]\n\n    const fcfsColumn = [\n      {\n        name: \"Process\",\n        selector: \"process\"\n      },\n      {\n        name: \"Arrival Time\",\n        selector: \"arrival\"\n      },\n      {\n        name: \"Burst Time\",\n        selector: \"burst\"\n      },\n      {\n        name: \"Waiting Time\",\n        selector: \"fcfswt\"\n      },\n      {\n        name: \"Turn Around Time\",\n        selector: \"fcfstat\"\n      }\n    ]\n\n    const sjfColumn = [\n      {\n        name: \"Process\",\n        selector: \"process\"\n      },\n      {\n        name: \"Arrival Time\",\n        selector: \"arrival\"\n      },\n      {\n        name: \"Burst Time\",\n        selector: \"burst\"\n      },\n      {\n        name: \"Waiting Time\",\n        selector: \"sjfwt\"\n      },\n      {\n        name: \"Turn Around Time\",\n        selector: \"sjftat\"\n      }\n    ]\n\n    const priorityColumn = [\n      {\n        name: \"Process\",\n        selector: \"process\"\n      },\n      {\n        name: \"Arrival Time\",\n        selector: \"arrival\"\n      },\n      {\n        name: \"Burst Time\",\n        selector: \"burst\"\n      },\n      {\n        name: \"Priority\",\n        selector: \"priority\"\n      },\n      {\n        name: \"Waiting Time\",\n        selector: \"pwt\"\n      },\n      {\n        name: \"Turn Around Time\",\n        selector: \"ptat\"\n      }\n    ]\n\n    const rrColumn = [\n      {\n        name: \"Process\",\n        selector: \"process\"\n      },\n      {\n        name: \"Burst Time\",\n        selector: \"burst\"\n      },\n      {\n        name: \"Waiting Time\",\n        selector: \"rrwt\"\n      },\n      {\n        name: \"Turn Around Time\",\n        selector: \"rrtat\"\n      }\n    ]\n\n    const actions = [\n      {\n        icon: \"far fa-trash-alt\",\n        trigger: (process) => this.showDeletePopup(process),\n        text: \"Delete\",\n        buttonClass: \"action-link action-red\"\n      }\n    ]\n    const tabs = [\n      \"First Come First Serve\",\n      \"Shortest Job First (Preemptive)\",\n      \"Priority\",\n      \"Round Robin\"\n    ]\n\n    const data = {\n      labels: [\n        \"First Come First Serve\",\n        \"Shortest Job First\",\n        \"Priority\",\n        \"Round Robin\"\n      ],\n      datasets: [\n        {\n          label: \"Waiting Time\",\n          backgroundColor: \"rgba(255,147,78,0.5)\",\n          pointBackgroundColor: \"rgb(255,147,78)\",\n          data: [\n            parseFloat(avgfcfswt).toFixed(2),\n            parseFloat(avgsjfwt).toFixed(2),\n            parseFloat(avgpwt).toFixed(2),\n            parseFloat(avgrrwt).toFixed(2)\n          ]\n        }, {\n          label: 'Turn Around Time',\n          backgroundColor: \"rgba(255,78,106,0.5)\",\n          pointBackgroundColor: \"rgba(255,78,106,1)\",\n          data: [\n            parseFloat(avgfcfstat).toFixed(2),\n            parseFloat(avgsjftat).toFixed(2),\n            parseFloat(avgptat).toFixed(2),\n            parseFloat(avgrrtat).toFixed(2)\n          ]\n        }\n      ]\n    }\n\n    const options = {\n      legend: {\n        position: 'bottom'\n      },\n      title: {\n        display: true,\n        text: 'Comparison between Scheduling Algorithms',\n        fontColor: '#ebeef0',\n        fontSize: 14,\n        padding: 25\n      },\n      scale: {\n        width: 500,\n        reverse: false,\n        gridLines: {\n          color: '#c5c9cc'\n        },\n        angleLines: {\n          color: '#c5c9cc'\n        },\n        ticks: {\n          fontColor: '#c5c9cc',\n          backdropColor: \"#212529\",\n          beginAtZero: true\n        },\n        pointLabels: {\n          fontColor: \"#c5c9cc\",\n          fontSize: 12\n        },\n        pointLabelFontSize: 20\n      }\n    }\n\n    return (\n      <div>\n        <section className=\"container-1-2\">\n          <div className=\"div-1\">\n            <div className=\"header\">\n              <div className=\"heading-div\">\n                <h1>Processes</h1>\n              </div>\n              <div className=\"button-div\">\n                <Button text=\"Add Process\" icon=\"fas fa-plus\" onClick={() => this.showAddProcessPopup(null, \"add\")} />\n              </div>\n            </div>\n            <Table\n              data={processData}\n              columns={columns}\n              actions={actions}\n            />\n            {processData.length === 0 ?\n              null :\n              <div className=\"popup-input-div white-text\">\n                <label>Enter Quantum for Round Robin: </label>\n                <input className=\"form-input\" type=\"number\" name=\"quantum\" value={quantum} onChange={this.handleChange} />\n              </div>}\n\n          </div>\n          <div className=\"div-2\">\n            <Radar data={data} options={options} height=\"200\" />\n          </div>\n        </section>\n\n        {processData.length === 0 ?\n          null :\n          <section>\n            <div className=\"calculate-button\">\n              <div className=\"lottie\">\n                <lottie-player src=\"https://assets8.lottiefiles.com/private_files/lf30_xkRFbO.json\" background=\"transparent\" speed=\"1\" loop autoplay></lottie-player>\n              </div>\n              <div>\n                <Button type=\"primary\" onClick={this.calculate} text=\"Calculate\" />\n              </div>\n            </div>\n            <TabPanel\n              tabs={tabs}\n              handler={this.changeSelection}\n              selection={selection}\n            />\n            {showCalculatedData ?\n              <>\n                {selection === 0 ?\n                  <div>\n                    <Table\n                      data={processData}\n                      columns={fcfsColumn}\n                    />\n                  </div> : null}\n                {selection === 1 ?\n                  <div>\n                    <Table\n                      data={processData}\n                      columns={sjfColumn}\n                    />\n                  </div> : null}\n                {selection === 2 ?\n                  <div>\n                    <Table\n                      data={processData}\n                      columns={priorityColumn}\n                    />\n                  </div> : null}\n                {selection === 3 ?\n                  <div>\n\n                    {quantum === 0 ?\n                      <span>Please enter quantum value</span> :\n                      <Table\n                        data={processData}\n                        columns={rrColumn}\n                      />}\n\n                  </div> : null}\n              </>\n              : null}\n          </section>}\n\n        {\n          addProcessPopup.show ?\n            <Popup headline={addProcessPopup.headline} content={addProcessPopup.content} actions={addProcessPopup.actions} cancelAction={addProcessPopup.cancelAction} color={addProcessPopup.color} />\n            : null\n        }\n      </div >\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}